package lab1;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.util.Arrays;

import org.testng.annotations.Test;
import org.testng.annotations.DataProvider;

import lab1.Variant13;
import lab1.Variant13.*;

public class Variant13Test {

  @Test(dataProvider = "beginProvider")
  public void beginTest(float R1, float R2, Square a) {
	  assertTrue(new Variant13().beginTask(R1, R2).equals(a));
  }

  @DataProvider
  public Object[][] beginProvider(){
  	Square a = new Square();
  	a.setS1(153.86f);
  	a.setS2(78.5f);
  	a.setS3(75.36f);
  	return new Object[][] { { 7, 5, a } };
  }
  
  @DataProvider 
  public Object[][] begin_fail_test(){
	  return new Object[][] {{2,6},{-8,5},{-9,-6}};
  }
  @Test(dataProvider = "begin_fail_test", expectedExceptions = AssertionError.class)
   public void BeginTest2(float a,  float b ) {
	  new Variant13().beginTask(a,b);
	
  }
  //--------------------------------------------------------------------------
  
  @Test(dataProvider = "integerProvider")
  public void integerTest(int a, int b) {
	  assertEquals(new Variant13().integerTask(a), b);
  }
  
  @DataProvider
  public Object[][] integerProvider(){
	  return new Object[][] { { 123, 231 }, { 563, 635 }, { 812, 128 } };  
  }
  @DataProvider 
  public Object[][] ineteger_fail_test(){
	  return new Object[][] {{0},{1000},{99}};
  }
  @Test(dataProvider = "ineteger_fail_test", expectedExceptions = AssertionError.class)
   public void integerTest2(int a ) {
	  new Variant13().integerTask(a);
	
  }
  //-------------------------------------------------------------------------
  
  @Test(dataProvider = "booleanProvider")
  public void BooleanTest(int a, int b, int c, boolean d) {
	  assertEquals(new Variant13().booleanTask(a, b, c), d);
  }
  
  @DataProvider
  public Object[][] booleanProvider(){
	  return new Object[][] { { 1, 2, -1, true }, { -5, -1, -5, false }, { 1, 2, 8, true } };  
  }
 
  //------------------ -------------------------------------------------------
  
  @Test(dataProvider = "ifProvider")
  public void IfTest(float a, float b, float c, float d) {
	  assertEquals(new Variant13().ifTask(a, b, c), d);
  }
  
  @DataProvider
  public Object[][] ifProvider(){
	  return new Object[][] { { 4, 2, 7, 4 }, { 1,3, 1, 1 }, { 6, 9, 8, 8 } };  
  }
  //---------------------------------------------------------------------------
  
  @Test(dataProvider = "caseProvider")
  public void CaseTest(int a, float b, Triangle d) {
	 assertEquals(new Variant13().caseTask(a, b), d);
  }
  
  @DataProvider
  public Object[][] caseProvider(){
	  Triangle a = new Triangle();
	  a.setA(5.0f);
	  a.setC(7.071068f);
	  a.setH(3.535534f);
	  a.setS(12.5f);
	  return new Object[][] { {1, 5.0f, a } };  
  }
 
  //-----------------------------------------------------------------------------
  
  @Test(dataProvider = "forProvider")
  public void ForTest(int a, float b) {
	  assertEquals(new Variant13().forTask(a), b);
  }
  
  @DataProvider
  public Object[][] forProvider(){
	  return new Object[][] { { 6, -0.3f }, { 8, -0.4f }, { 9, 1.5f } };  
  }
  //---------------------------------------------------------------------
  
  
  @Test(dataProvider = "whileProvider")
  public void WhileTest(float a, Sum b) {
	  assertTrue(new Variant13().whileTask(a).equals(b));
  }
  
  @DataProvider
  public Object[][] whileProvider(){
	  Sum a = new Sum();
	  a.setSum(2.28f);
	  a.setCount(5);
	  return new Object[][] { { 2.1f, a} };  
  }
  //----------------------------------------------------------------------
   
  @Test(dataProvider = "arrayProvider")
  public void ArrayTest(float[] a, int b, Array c) {
	  Array arr = new Variant13().arrayTask(a, b);
	  assertTrue(arr.equals(c));
  }
  
  @DataProvider
  public Object[][] arrayProvider(){
	  float[] a = { 2, 6, 3, 9, 1, -4, 2, -7, 9 };
	  Array � = new Array();
	  int[] arr = { 1, 3, 4, 6};
	  �.setIndex(arr); 
	  �.setLength(4);
	  return new Object[][] { { a, 9, � } };  
  }
  //----------------------------------------------------------------------
  
  @Test(dataProvider = "matrixProvider")
  public void MatrixTest(float[][] matrix, int n, int m, float[][] result) {
	  assertTrue(Arrays.deepEquals(new Variant13().matrixTask(matrix, n, m), result));
  }
  
  @DataProvider
  public Object[][] matrixProvider(){
	  float[][] a = { { 1, 2, 3, 4, 5 },
			  		  { 3, 7, 3, 1, 8 },
			  		  { 8, 9, 3, 2, 1 },
			  		  { 5, 2, 7, 8, 9 } };
	  
	  float[][] b = { { 5, 2, 7, 8, 9 },
	  		  		  { 8, 9, 3, 2, 1 },
	  		          { 3, 7, 3, 1, 8 },
	  		          { 1, 2, 3, 4, 5 } };
	  
	  return new Object[][] { { a, 4, 5, b} };  
  }
}
